@page "/"
@inject IJSRuntime JS;

<h1>Hello, world!</h1>

<canvas width="256" height="256" @ref="CanvasElement"/>

@code {
    private const int Width = 256;

    private const int Height = 256;

    protected ElementReference CanvasElement;

    private byte colour(int iteration, int offset, int scale) {
        iteration = ((iteration * scale) + offset) % 1024;
        if (iteration < 256) {
            return (byte)iteration;
        } else if (iteration < 512) {
            return (byte)(255 - (iteration - 255));
        } else {
            return 0;
        }
    }

    private int iterateEquation(double x0, double y0, int maxiterations) {
        double a = 0.0, b = 0.0, rx = 0.0, ry = 0.0;
        int iterations = 0;
        while (iterations < maxiterations && (rx * rx + ry * ry <=4.0)) {
            rx = a * a - b * b + x0;
            ry = 2.0 * a * b + y0;
            a = rx;
            b = ry;
            iterations++;
        }
        return iterations;
    }

    private double scale(double domainStart, double domainLength, double screenLength, double step) {
        return domainStart + domainLength * ((step - screenLength) / screenLength);
    }

    private byte[] mandelbrot(int maxIterations, double cx, double cy, double diameter) {
        byte[] data = new byte[Width * Height *4];
        double verticalDiameter = diameter * Height / Width;
        for(int x = 0; x < Width; x++) {
            for(int y = 0; y < Height; y++) {
                //map to mandelbrot coordinates
                double rx = scale(cx, diameter, Width, x);
                double ry = scale(cy, verticalDiameter, Height, y);
                int iterations = iterateEquation(rx, ry, maxIterations);
                int idx = ((x + y * Width) * 4);
                //set the red and alpha components
                data[idx] = iterations == maxIterations ? (byte)0 : colour(iterations, 0, 4);
                data[idx + 1] = iterations == maxIterations ? (byte)0 : colour(iterations, 128, 4);
                data[idx + 2] = iterations == maxIterations ? (byte)0 : colour(iterations, 356, 4);
                data[idx + 3] = 255;
            }
        }
        return data;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        byte[] data = mandelbrot(10000, -0.7436447860, 0.1318252536, 0.00029336);

        await JS.InvokeAsync<object>("render", new object[] { CanvasElement, 256, 256, new List<byte>(data) });
    }
}
