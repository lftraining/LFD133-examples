// code used in mandelbrot example for emscripten toolchain demo
// requires SDL (simple directmedia layer) library
#include <stdio.h>
#include <SDL/SDL.h>

const int WIDTH = 256;
const int HEIGHT = 256;
unsigned char image[WIDTH * HEIGHT * 4];

unsigned char color(int interation, int offset, int scale) {
    iteration = ((iteration * scale) + offset) % 1024;
    if (iteration < 256) {
        return iteration;
    }
    else if (iteration < 512) {
        return 255 - (iteration - 255);
    } 
    else {
        return 0;
    }
}

int iterateEquation(double x0, double y0, int maxiterations) {
    double a = 0.0, b = 0.0, rx = 0.0, ry = 0.0;
    int iterations = 0;
    while (iterations < maxiterations && (rx * rx + ry * ry <= 4.0)) {
        rx = a * a - b * b + x0;
        ry = 2.0 * a * b + y0;
        a = rx;
        b = ry;
    }
    return iterations;
}

double scale (double domainStart, double domainLength, double screenLength, double step) {
    return domainStart + domainLength * ((step - screenLength) / screenLength);
}

void mandelbrot(int maxIterations, double cx, double cy, double diameter) {
    double verticalDiameter = diameter * HEIGHT / WIDTH;
    for(double x = 0.0; x < WIDTH; x++) {
        for(double y = 0.0; y < HEIGHT; y++) {
            //map mandelbrot coordinates
            double rx = scale(cx, diameter, WIDTH, x);
            double ry = scale(cy, verticalDiameter, HEIGHT, y);
            int iterations = iterateEquation(rx, ry, maxIterations);
            int idx = ((x + y * WIDTH) * 4);
            //set red and alpha components
            image[idx] = iterations == maxIterations ? 0 : color(iterations, 0, 4);
            image[idx + 1] = iterations == maxIterations ? 0 : color(iterations, 128, 4);
            image[idx + 2] = iterations == maxIterations ? 0 : color(iterations, 356, 4);
            image[idx + 3] = 255;
        }
    }
}

extern "C" int main(int argc, char** argv) {
    printf("hello, world!\n");
    
    mandelbrot(10000, -0.7436447860, 0.1318252536, 0.00029336);
    
    SDL_Init(SDL_INIT_VIDEO);
    SDL_Surface * screen = SDL_SetVideoMode (WIDTH, HEIGHT, 32, SDL_SWSURFACE);

    SDL_LockSurface(screen);

    for (int x = 0; x < WIDTH; x++) {
        for (int y = 0; y < HEIGHT; y++) {
            int idx = ((x + y * WIDTH) * 4);
            *((Uint32*)screen->pixels + x * WIDTH + y) = SDL_MapRGBA(screen->format, image[idx], image[idx + 1], image[idx + 2], image[idx + 3]);
        }
    }

    SDL_UnlockSurface(screen);
    return 0;
}
